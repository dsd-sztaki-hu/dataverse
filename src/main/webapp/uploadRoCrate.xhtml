<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:h="http://java.sun.com/jsf/html"
      xmlns:ui="http://java.sun.com/jsf/facelets"
      xmlns:p="http://primefaces.org/ui">
    <h:head>
        <h2>RO-Crate upload</h2>
    </h:head>

    <h:body>
        <ui:composition template="/dataverse_template.xhtml">
            <ui:define name="body">
                <h:form id="uploadForm" method="post" enctype="multipart/form-data">
                    <label for="fileInput">Choose a file to upload:</label>
                    <input type="file" id="fileInput" name="fileInput" accept="application/zip" />
                    <br />
                    <input type="submit" value="Upload" />
                    <p:remoteCommand name="sendRoCrateData" actionListener="#{roCrateUploadServiceBean.handleRoCrateUpload}" />
                </h:form>

                <script type="module">
                    import { unzip } from 'https://cdn.skypack.dev/unzipit';
                    const uploadForm = document.getElementById("uploadForm");
                    const fileInput = document.getElementById("fileInput");
                    const searchParams = new URLSearchParams(window.location.search)
                    const ownerId = new URLSearchParams(window.location.search).get('ownerId')

                    const toBase64 = file => new Promise((resolve, reject) => {
                        const reader = new FileReader();
                        reader.readAsDataURL(file);
                        reader.onload = () => resolve(reader.result);
                        reader.onerror = error => reject(error);
                    });

                    async function readFiles(files) {
                        const {entries} = await unzip(files);
                        return Object.values(entries).find(f => f.name === 'ro-crate-metadata.json');
                    }

                    uploadForm.addEventListener("submit", async function (event) {
                        event.preventDefault();
                        const roCrate = fileInput.files[0];
                        const roCrateName = roCrate.name;
                        const roCrateType = roCrate.type;
                        const roCrateJson = await readFiles(roCrate)
                        const blob = new Blob([roCrate], {type: 'application/zip'});
                        const roCrateAsBase64 = await toBase64(blob);
                        let roCrateData = [
                            {name: 'roCrateAsBase64', value: roCrateAsBase64},
                            {name: 'roCrateName', value: roCrateName},
                            {name: 'roCrateType', value: roCrateType}
                        ]
                        if (roCrateJson) {
                            const roCrateJsonText = await roCrateJson.text();
                            roCrateData.push({name: 'roCrateJson', value: roCrateJsonText})
                        }
                        await sendRoCrateData(roCrateData)
                        location.href = "dataset.xhtml?ownerId=" + ownerId;
                    });
                </script>
            </ui:define>
        </ui:composition>
    </h:body>
</html>
